/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.cd_store;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.*;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.*;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Dell
 */
public class CD_Store extends javax.swing.JFrame {

    /**
     * Creates new form CD_Store
     */
    public CD_Store() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnNew = new javax.swing.JButton();
        btnBackup = new javax.swing.JButton();
        btnRes = new javax.swing.JButton();
        btnRef = new javax.swing.JButton();
        btnDel = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbTable = new javax.swing.JTable();
        btnSearch = new javax.swing.JButton();
        Combobox = new javax.swing.JComboBox<>();
        txtSearchBar = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnNew.setText("New CD");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnBackup.setText("Backup");
        btnBackup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackupActionPerformed(evt);
            }
        });

        btnRes.setText("Restore");
        btnRes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResActionPerformed(evt);
            }
        });

        btnRef.setText("Refresh");
        btnRef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefActionPerformed(evt);
            }
        });

        btnDel.setText("Delete");
        btnDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(btnNew)
                .addGap(18, 18, 18)
                .addComponent(btnBackup)
                .addGap(18, 18, 18)
                .addComponent(btnRes)
                .addGap(18, 18, 18)
                .addComponent(btnRef)
                .addGap(18, 18, 18)
                .addComponent(btnDel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNew)
                    .addComponent(btnBackup)
                    .addComponent(btnRes)
                    .addComponent(btnRef)
                    .addComponent(btnDel))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        tbTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title", "Collection", "Type", "Price"
            }
        ));
        jScrollPane1.setViewportView(tbTable);

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        Combobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Title", "Collection", "Type", "Price" }));
        Combobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(Combobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtSearchBar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSearch)
                .addGap(33, 33, 33))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearch)
                    .addComponent(Combobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        NewCDFormDialog ncd = new NewCDFormDialog(this, true);
        ncd.setVisible(true);
        ncd.pack();
        ncd.setLocationRelativeTo(null);
        ncd.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_btnNewActionPerformed
    public static void AddRowToJtable(Object[] data) {
        DefaultTableModel d = (DefaultTableModel) tbTable.getModel();
        d.addRow(data);
    }
//     public static void AddRowToJtable(Vector v) {
//        DefaultTableModel d = (DefaultTableModel) tbTable.getModel();
//        d.addRow(v);
//    }
    private void btnResActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Select a file to restore");
        fileChooser.setSelectedFile(new File("C:\\Users\\Dell\\Documents\\New Folder\\CD.eiu"));
        int userSelection = fileChooser.showOpenDialog(null);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();

            try {
                FileReader fr = new FileReader(file);
                BufferedReader br = new BufferedReader(fr);

                DefaultTableModel model = (DefaultTableModel) tbTable.getModel();
                model.setRowCount(0); // Clear existing data in the table if any

                Object[] lines = br.lines().toArray();
                for (int i = 0; i < lines.length; i++) {
                    String[] row = lines[i].toString().split(" ");
                    model.addRow(row);
                }

                br.close();
                fr.close();

            } catch (Exception ex) {
                Logger.getLogger(NewCDFormDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnResActionPerformed


    private void btnRefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefActionPerformed
        DefaultTableModel model = (DefaultTableModel) tbTable.getModel();
        model.setRowCount(0); // Clear the table

        // Read the data from the file and populate the table
        try {
            File file = new File("C:\\Users\\Dell\\Documents\\New Folder\\CD.eiu");
            Scanner scanner = new Scanner(file);

            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                String[] data = line.split(" ");
                model.addRow(data);
            }

            scanner.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        }

        txtSearchBar.setText(""); // Clear txtSearchBar
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        tbTable.setRowSorter(sorter);
    }//GEN-LAST:event_btnRefActionPerformed

    private void btnBackupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackupActionPerformed

        try {
            // Create a file chooser
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Specify a file to save");

            // Set the default file name
            fileChooser.setSelectedFile(new File("C:\\Users\\Dell\\Documents\\New Folder\\CD.eiu"));

            // Show save dialog; this method does not return until the dialog is closed
            int userSelection = fileChooser.showSaveDialog(null);

            if (userSelection == JFileChooser.APPROVE_OPTION) {
                File fileToSave = fileChooser.getSelectedFile();

                FileWriter fw = new FileWriter(fileToSave.getAbsoluteFile());
                BufferedWriter bw = new BufferedWriter(fw);

                // Loop through jtable rows
                for (int i = 0; i < tbTable.getRowCount(); i++) {
                    // Loop through jtable columns
                    for (int j = 0; j < tbTable.getColumnCount(); j++) {
                        bw.write(tbTable.getModel().getValueAt(i, j) + " ");
                    }
                    // Break line at the end of each row
                    bw.write("\n");
                }
                // Close BufferedWriter
                bw.close();
                // Close FileWriter 
                fw.close();
                JOptionPane.showMessageDialog(null, "Data Exported");

            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_btnBackupActionPerformed
    private int getColumnIndexByName(String columnName, DefaultTableModel model) {
        for (int i = 0; i < model.getColumnCount(); i++) {
            if (model.getColumnName(i).equals(columnName)) {
                return i;
            }
        }
        return -1; // Return -1 if the column is not found
    }
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        try {
            DefaultTableModel model = (DefaultTableModel) tbTable.getModel();
            TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
            tbTable.setRowSorter(sorter);

            if (model.getRowCount() == 0) {
                JOptionPane.showMessageDialog(null, "The table is empty.");
                return; // Exit the method if the table is empty
            }

            String selectedColumn = (String) Combobox.getSelectedItem(); // Get the selected column name
            int columnIndex = getColumnIndexByName(selectedColumn, model); // Get the column index

            // Check if the search bar is empty
            if (txtSearchBar.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please enter a search query.");
                return; // Exit the method without performing the search
            }

            // Set up the row filter based on the search text and selected column
            if (columnIndex != -1) {
                RowFilter<DefaultTableModel, Object> rowFilter = RowFilter.regexFilter("^" + txtSearchBar.getText() + "$", columnIndex);
                sorter.setRowFilter(rowFilter);
            } else {
                sorter.setRowFilter(null); // Clear the filter if columnIndex is invalid
            }
            // Save the filtered data to a file
            try (PrintWriter writer = new PrintWriter(new File("C:\\Users\\Dell\\Documents\\New Folder\\Result.eiu"))) {
                for (int i = 0; i < sorter.getViewRowCount(); i++) {
                    for (int j = 0; j < model.getColumnCount(); j++) {
                        writer.print(model.getValueAt(sorter.convertRowIndexToModel(i), j) + "\t");
                    }
                    writer.println();
                }
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Table is empty: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelActionPerformed
        DefaultTableModel model = (DefaultTableModel) tbTable.getModel();
        if (tbTable.getSelectedRowCount() == 1) {
            // Remove row from table
            int selectedRow = tbTable.getSelectedRow();
            model.removeRow(selectedRow); // Update file
            try {
                File file = new File("C:\\Users\\Dell\\Documents\\New Folder\\CD.eiu");
                List<String> lines = new ArrayList<>(Files.readAllLines(file.toPath()));
                lines.remove(selectedRow);
                Files.write(file.toPath(), lines);
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            if (tbTable.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "Table is empty");
            } else {
                JOptionPane.showMessageDialog(this, "Row is not selected");
            }
        }

    }//GEN-LAST:event_btnDelActionPerformed


    private void ComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboboxActionPerformed
        DefaultTableModel model = (DefaultTableModel) tbTable.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        tbTable.setRowSorter(sorter);
        Map<String, Integer> columnMap = new HashMap<>();
        columnMap.put("Title", 0);
        columnMap.put("Collection", 1);
        columnMap.put("Type", 2);
        columnMap.put("Price", 3);
        String selectedColumn = (String) Combobox.getSelectedItem(); // Get the selected column name
        int columnIndex = columnMap.get(selectedColumn); // Get the column index from the map
        sorter.setSortKeys(List.of(new RowSorter.SortKey(columnIndex, SortOrder.ASCENDING)));
    }//GEN-LAST:event_ComboboxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CD_Store.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CD_Store.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CD_Store.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CD_Store.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CD_Store().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Combobox;
    private javax.swing.JButton btnBackup;
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnRef;
    private javax.swing.JButton btnRes;
    private javax.swing.JButton btnSearch;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTable tbTable;
    private javax.swing.JTextField txtSearchBar;
    // End of variables declaration//GEN-END:variables
}
